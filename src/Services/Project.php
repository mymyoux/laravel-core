<?php

namespace Core\Services;

use File;
/**
 * Handle project generation for Laravel (certificaes, nginx, docker ... )
 */
class Project
{
	static protected $config = NULL;

	public function __construct()
	{
		if(!isset(static::$config))
		{
			$home_path = home_path('.myno/config.json');
			if(!file_exists($home_path))
			{
				$config = std(['port'=>0, 'domains'=>std([]), 'nginx_path'=>NULL, 'sudo'=>NULL]);
				if(!file_exists(dirname($home_path)))
				{
					mkdir(dirname($home_path));
				}
			}else
			{
				$config = json_decode(File::get($home_path), False);
			}
			static::$config = $config;
		}
	}
	protected function setPort($domain, $port)
	{
		static::$config->domains->$domain = $port;
	}
	protected function getPort($domain)
	{
		if(!isset(static::$config->domains->$domain))
		{
			static::$config->port++;
            static::$config->domains->$domain = static::$config->port;
		}
		return static::$config->domains->$domain;
	}
	protected function copy($source, $destination, $domain)
	{
		$path_source = base_path('docker/models/'.$source);
		if(!file_exists($path_source))
		{
			throw new \Exception($path_source.' not found');
		}
		$content = File::get($path_source);
		$content = str_replace('%port_php%', $this->getPort($domain)+9000, $content);
        $content = str_replace('%port_mysql%', $this->getPort($domain)+30000, $content);
        $content = str_replace('%domain%', $domain, $content);
        $content = str_replace('%public_path%', public_path(), $content);
        $content = str_replace('%base_path%', base_path(), $content);
		$content = "### FILE autogenerated DO NOT EDIT - edit docker/models/".$source." instead ###\n" .$content;
		
		File::put($destination, $content);
	}
	protected function hasNginxPath()
	{
		return isset(static::$config->nginx_path);
	}
	protected function getNginxPath()
	{
		return static::$config->nginx_path;
	}
	protected function setNginxPath($path)
	{
		static::$config->nginx_path = $path;
		$servers = join_paths($path, 'servers');
		if(!file_exists($servers))
		{
			throw new \Exception($servers.' not found');
		}
	}
	protected function write()
	{
		File::put( home_path('.myno/config.json'), json_encode(static::$config, \JSON_PRETTY_PRINT));
	}
	public static function __callStatic($method, $parameters)
    {
        return (new static)->$method(...$parameters);
    }
}
